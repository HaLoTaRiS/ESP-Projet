# ==============================================================================
# ESPHome Configuration for VEML7700 Sensor
# Author: Baptiste F
# Date: 2024-12-08
# Version: 1.0
# Description: Default configuration for VEML7700 Sensor 
#           (Precise ambient light and infrared sensor)
#       This example demonstrates the use of an ESP8266 development board.
# ==============================================================================

substitutions:
  name: sensor-veml7700          	# Technical name of the device
  friendly_name: VEML7700 Sensor 	# Friendly name displayed in the user interface

esphome:
  name: ${name}                         # Use the substitution for the technical name
  friendly_name: ${friendly_name}       # Use the substitution for the friendly name
  # Basic ESPHome configuration with a unique device name.
  # The name is used to identify the device in Home Assistant.

# Specify the board model (e.g., D1 Mini). Update this line to match the type of board you are using.
esp8266:
  board: d1_mini

# Enable logging for debugging and data inspection
logger:
  level: DEBUG                          # Logging level set to DEBUG for detailed information

# Enable Home Assistant integration via the API
api:
  encryption:
    key: "your-encryption-key"          # Add an encryption key to secure communication with Home Assistant

# Enable over-the-air (OTA) updates to flash firmware without a physical connection
ota:
  - platform: esphome
    password: "yourpassword"

# Wi-Fi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Store sensitive information (e.g., WiFi SSID and password) in `secrets.yaml`.

  # Enable a fallback hotspot (access point) if WiFi connection fails.
  ap:
    ssid: "Fallback-VEML7700-sensor"      	# Fallback Wi-Fi access point name
    password: "fallbackpassword"        # Fallback access point password

# Enable a captive portal for easier connection to the fallback hotspot.
captive_portal:

# Enable a web server for monitoring and control via a browser.
web_server:
  port: 80                              # Default port for the web server

# Configuration of the onboard LED connected to GPIO2 (specific to the ESP8266 board) to blink during BME280 data acquisition.
output:
  - platform: gpio
    pin: GPIO2
    id: led_indicator
    inverted: true  
    # Invert the state of the output (active-low LED)

# I2C bus configuration
i2c:
  sda: GPIO4  			    # SDA pin for I2C communication (example for ESP8266 D1 Mini, adjust according to your board)
  scl: GPIO5  			    # SCL pin for I2C communication (example for ESP8266 D1 Mini, adjust according to your board)
  scan: true  			    # Enable scanning to detect connected I2C devices
  frequency: 15000.0  	# Frequency for the BME280 sensor

sensor:
  - platform: veml7700
    address: 0x10                       # Default I2C address of the sensor, adjust if a different address is detected during scanning
    update_interval: 30s                # Interval between data updates from the sensor

    # Configuration for the ambient light sensor (visible light in lux, ALS channel)
    ambient_light:
      name: "Ambient Light"             # Name displayed in the frontend
      accuracy_decimals: 2              # Number of decimal places for reported values
      filters:
        - median:                       # Apply a median filter to reduce noise and smooth out rapid changes
            window_size: 5              # Number of readings to consider in the median calculation
            send_every: 3               # Send updated value every 3 readings
        - or:                           # Apply one of the following conditions to control updates
            - delta: 1.0                # Ignore changes smaller than 1 lux
            - throttle: 5s              # Limit updates to no more than once every 5 seconds
      on_value:
        then:
          # Blink the LED once when ambient light data is acquired
          - output.turn_on: led_indicator
          - delay: 200ms
          - output.turn_off: led_indicator

    # Configuration for the full spectrum sensor (total lux including visible and near-infrared light, WHITE channel)
    full_spectrum:
      name: "Full Spectrum"             # Name displayed in the frontend
      accuracy_decimals: 2              # Number of decimal places for reported values
      icon: "mdi:weather-sunny"         # Icon representing the data type in the frontend

    # Configuration for the infrared light measurement (calculated as WHITE - ALS, in lux)
    infrared:
      name: "Infrared"                  # Name displayed in the frontend
      accuracy_decimals: 2              # Number of decimal places for reported values
      icon: "mdi:solar-power"           # Icon representing the data type in the frontend

    # Configuration for raw counts of the ambient light sensor (ALS channel)
    ambient_light_counts:
      name: "Ambient Light Counts"      # Raw reading without conversion to lux
      accuracy_decimals: 0              # No decimals for raw counts

    # Configuration for raw counts of the full spectrum sensor (WHITE channel)
    full_spectrum_counts:
      name: "Full Spectrum Counts"      # Raw reading without conversion to lux
      accuracy_decimals: 0              # No decimals for raw counts

    # Gain used by the sensor (useful if auto-gain mode is enabled)
    actual_gain:
      name: "Actual Gain"               # Name displayed in the frontend
      icon: "mdi:gauge"                 # Icon representing gain in the frontend

    # Integration time used by the sensor (useful for understanding measurement delays)
    actual_integration_time:
      name: "Actual Integration Time"   # Name displayed in the frontend
      icon: "mdi:timer"                 # Icon representing time in the frontend
