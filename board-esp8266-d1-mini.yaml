# ==============================================================================
# ESPHome Configuration for ESP8266 D1-mini Development Board
# Author: Baptiste F
# Date: 2024-12-08
# Version: 1.0
# Description: Default configuration for ESP8266 D1-mini board
# ==============================================================================

substitutions:
  name: esp8266_board_d1_mini           # Technical name of the device
  friendly_name: Board ESP8266 D1 Mini  # Friendly name displayed in the user interface

esphome:
  name: ${name}                         # Use the substitution for the technical name
  friendly_name: ${friendly_name}       # Use the substitution for the friendly name
  # Basic ESPHome configuration with a unique device name.
  # The name is used to identify the device in Home Assistant.

esp8266:
  board: d1_mini                        # Specify the exact board model (D1 Mini)
  # ESP8266 hardware configuration.

# Enable logging for debugging and data inspection
logger:
  level: DEBUG                          # Logging level set to DEBUG for detailed information

# Enable Home Assistant integration via the API
api:
  encryption:
    key: "your-encryption-key"          # Add an encryption key to secure communication with Home Assistant

# Enable over-the-air (OTA) updates to flash firmware without a physical connection
ota:

# Wi-Fi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Store sensitive information (e.g., WiFi SSID and password) in `secrets.yaml`.

  # Enable a fallback hotspot (access point) if WiFi connection fails.
  ap:
    ssid: "Fallback-Board-D1-Mini"      # Fallback Wi-Fi access point name
    password: "fallbackpassword"        # Fallback access point password

# Enable a web server for monitoring and control via a browser.
web_server:
  port: 80                              # Default port for the web server (can be changed if needed)

# Enable a captive portal for easier connection to the fallback hotspot.
captive_portal:

# Configuration for the onboard LED
output:
  - platform: gpio
    pin: 
      number: GPIO2                    # GPIO2 is connected to the onboard LED
      inverted: true                   # Invert signal since the LED is active-low
    id: onboard_led

# Make the onboard LED blink
interval:
  - interval: 1s                       # Time interval (1 second)
    then:
      - output.turn_on: onboard_led    # Turn on the LED
  - interval: 1s                       # Another interval (1 second)
    then:
      - output.turn_off: onboard_led   # Turn off the LED
